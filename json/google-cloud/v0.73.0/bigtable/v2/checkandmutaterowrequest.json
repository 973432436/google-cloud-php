{"id":"bigtable\/v2\/checkandmutaterowrequest","type":"","title":"Google\\Cloud\\Bigtable\\V2\\CheckAndMutateRowRequest","name":"CheckAndMutateRowRequest","description":"<p>Request message for Bigtable.CheckAndMutateRow.<\/p>\n<p>Generated from protobuf message <code>google.bigtable.v2.CheckAndMutateRowRequest<\/code><\/p>\n<p>Extends \\Google\\Protobuf\\Internal\\Message<\/p>","examples":[],"resources":[],"methods":[{"id":"getTableName","type":"instance","name":"getTableName","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L84","description":"<p>The unique name of the table to which the conditional mutation should be\napplied.<\/p>\n<p>Values are of the form\n<code>projects\/&lt;project&gt;\/instances\/&lt;instance&gt;\/tables\/&lt;table&gt;<\/code>.<\/p>\n<p>Generated from protobuf field <code>string table_name = 1;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setTableName","type":"instance","name":"setTableName","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L99","description":"<p>The unique name of the table to which the conditional mutation should be\napplied.<\/p>\n<p>Values are of the form\n<code>projects\/&lt;project&gt;\/instances\/&lt;instance&gt;\/tables\/&lt;table&gt;<\/code>.<\/p>\n<p>Generated from protobuf field <code>string table_name = 1;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The unique name of the table to which the conditional mutation should be\napplied.<\/p>\n<p>Values are of the form\n<code>projects\/&lt;project&gt;\/instances\/&lt;instance&gt;\/tables\/&lt;table&gt;<\/code>.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/v2\/checkandmutaterowrequest\">Google\\Cloud\\Bigtable\\V2\\CheckAndMutateRowRequest<\/a>"],"description":""}]},{"id":"getAppProfileId","type":"instance","name":"getAppProfileId","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L114","description":"<p>This value specifies routing for replication. If not specified, the\n&quot;default&quot; application profile will be used.<\/p>\n<p>Generated from protobuf field <code>string app_profile_id = 7;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setAppProfileId","type":"instance","name":"setAppProfileId","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L127","description":"<p>This value specifies routing for replication. If not specified, the\n&quot;default&quot; application profile will be used.<\/p>\n<p>Generated from protobuf field <code>string app_profile_id = 7;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>This value specifies routing for replication. If not specified, the\n&quot;default&quot; application profile will be used.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/v2\/checkandmutaterowrequest\">Google\\Cloud\\Bigtable\\V2\\CheckAndMutateRowRequest<\/a>"],"description":""}]},{"id":"getRowKey","type":"instance","name":"getRowKey","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L141","description":"<p>The key of the row to which the conditional mutation should be applied.<\/p>\n<p>Generated from protobuf field <code>bytes row_key = 2;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setRowKey","type":"instance","name":"setRowKey","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L153","description":"<p>The key of the row to which the conditional mutation should be applied.<\/p>\n<p>Generated from protobuf field <code>bytes row_key = 2;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The key of the row to which the conditional mutation should be applied.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/v2\/checkandmutaterowrequest\">Google\\Cloud\\Bigtable\\V2\\CheckAndMutateRowRequest<\/a>"],"description":""}]},{"id":"getPredicateFilter","type":"instance","name":"getPredicateFilter","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L170","description":"<p>The filter to be applied to the contents of the specified row. Depending\non whether or not any results are yielded, either <code>true_mutations<\/code> or\n<code>false_mutations<\/code> will be executed. If unset, checks that the row contains\nany values at all.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.RowFilter predicate_filter = 6;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"setPredicateFilter","type":"instance","name":"setPredicateFilter","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L185","description":"<p>The filter to be applied to the contents of the specified row. Depending\non whether or not any results are yielded, either <code>true_mutations<\/code> or\n<code>false_mutations<\/code> will be executed. If unset, checks that the row contains\nany values at all.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.RowFilter predicate_filter = 6;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The filter to be applied to the contents of the specified row. Depending\non whether or not any results are yielded, either <code>true_mutations<\/code> or\n<code>false_mutations<\/code> will be executed. If unset, checks that the row contains\nany values at all.<\/p>\n","types":["<a data-custom-type=\"bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/v2\/checkandmutaterowrequest\">Google\\Cloud\\Bigtable\\V2\\CheckAndMutateRowRequest<\/a>"],"description":""}]},{"id":"getTrueMutations","type":"instance","name":"getTrueMutations","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L203","description":"<p>Changes to be atomically applied to the specified row if <code>predicate_filter<\/code>\nyields at least one cell when applied to <code>row_key<\/code>. Entries are applied in\norder, meaning that earlier mutations can be masked by later ones.<\/p>\n<p>Must contain at least one entry if <code>false_mutations<\/code> is empty, and at most\n100000.<\/p>\n<p>Generated from protobuf field <code>repeated .google.bigtable.v2.Mutation true_mutations = 4;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["\\Google\\Protobuf\\Internal\\RepeatedField"],"description":""}]},{"id":"setTrueMutations","type":"instance","name":"setTrueMutations","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L219","description":"<p>Changes to be atomically applied to the specified row if <code>predicate_filter<\/code>\nyields at least one cell when applied to <code>row_key<\/code>. Entries are applied in\norder, meaning that earlier mutations can be masked by later ones.<\/p>\n<p>Must contain at least one entry if <code>false_mutations<\/code> is empty, and at most\n100000.<\/p>\n<p>Generated from protobuf field <code>repeated .google.bigtable.v2.Mutation true_mutations = 4;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Changes to be atomically applied to the specified row if <code>predicate_filter<\/code>\nyields at least one cell when applied to <code>row_key<\/code>. Entries are applied in\norder, meaning that earlier mutations can be masked by later ones.<\/p>\n<p>Must contain at least one entry if <code>false_mutations<\/code> is empty, and at most\n100000.<\/p>\n","types":["<a data-custom-type=\"bigtable\/v2\/mutation\">Google\\Cloud\\Bigtable\\V2\\Mutation[]<\/a>","\\Google\\Protobuf\\Internal\\RepeatedField"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/v2\/checkandmutaterowrequest\">Google\\Cloud\\Bigtable\\V2\\CheckAndMutateRowRequest<\/a>"],"description":""}]},{"id":"getFalseMutations","type":"instance","name":"getFalseMutations","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L237","description":"<p>Changes to be atomically applied to the specified row if <code>predicate_filter<\/code>\ndoes not yield any cells when applied to <code>row_key<\/code>. Entries are applied in\norder, meaning that earlier mutations can be masked by later ones.<\/p>\n<p>Must contain at least one entry if <code>true_mutations<\/code> is empty, and at most\n100000.<\/p>\n<p>Generated from protobuf field <code>repeated .google.bigtable.v2.Mutation false_mutations = 5;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["\\Google\\Protobuf\\Internal\\RepeatedField"],"description":""}]},{"id":"setFalseMutations","type":"instance","name":"setFalseMutations","source":"Bigtable\/src\/V2\/CheckAndMutateRowRequest.php#L253","description":"<p>Changes to be atomically applied to the specified row if <code>predicate_filter<\/code>\ndoes not yield any cells when applied to <code>row_key<\/code>. Entries are applied in\norder, meaning that earlier mutations can be masked by later ones.<\/p>\n<p>Must contain at least one entry if <code>true_mutations<\/code> is empty, and at most\n100000.<\/p>\n<p>Generated from protobuf field <code>repeated .google.bigtable.v2.Mutation false_mutations = 5;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Changes to be atomically applied to the specified row if <code>predicate_filter<\/code>\ndoes not yield any cells when applied to <code>row_key<\/code>. Entries are applied in\norder, meaning that earlier mutations can be masked by later ones.<\/p>\n<p>Must contain at least one entry if <code>true_mutations<\/code> is empty, and at most\n100000.<\/p>\n","types":["<a data-custom-type=\"bigtable\/v2\/mutation\">Google\\Cloud\\Bigtable\\V2\\Mutation[]<\/a>","\\Google\\Protobuf\\Internal\\RepeatedField"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/v2\/checkandmutaterowrequest\">Google\\Cloud\\Bigtable\\V2\\CheckAndMutateRowRequest<\/a>"],"description":""}]}]}