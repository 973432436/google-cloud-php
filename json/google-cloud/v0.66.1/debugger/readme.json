{"id":"debugger\/readme","type":"guide","title":"Google PHP Stackdriver Debugger","name":"Google PHP Stackdriver Debugger","description":"<body>\n<blockquote>\n<p>Idiomatic PHP client for <a href=\"https:\/\/cloud.google.com\/debugger\/\">Stackdriver Debugger<\/a>.<\/p>\n<\/blockquote>\n<ul>\n<li><a href=\"http:\/\/googlecloudplatform.github.io\/google-cloud-php\">Homepage<\/a><\/li>\n<li><a href=\"http:\/\/googlecloudplatform.github.io\/google-cloud-php\/#\/docs\/cloud-debugger\/latest\/debugger\/debuggerclient\">API documentation<\/a><\/li>\n<\/ul>\n<p><strong>NOTE:<\/strong> This repository is part of <a href=\"https:\/\/github.com\/googlecloudplatform\/google-cloud-php\">Google Cloud PHP<\/a>. Any\nsupport requests, bug reports, or development contributions should be directed to\nthat project.<\/p>\n<h2>Installation<\/h2>\n<ol>\n<li>\n<p>Install the PHP extension from PECL.<\/p>\n<pre><code class=\"language-bash\">$ pecl install stackdriver_debugger-alpha<\/code><\/pre>\n<p>On Windows, you can download pre-built .dll files <a href=\"https:\/\/pecl.php.net\/package\/stackdriver_debugger\">from PECL<\/a>.<\/p>\n<p>You may also need to enable the extension in your <code>php.ini<\/code> file:<\/p>\n<pre><code class=\"language-ini\"># on Unix\nextension=stackdriver_debugger.so\n\n# on Windows\nextension=php_stackdriver_debugger.dll<\/code><\/pre>\n<\/li>\n<li>\n<p>Install with <code>composer<\/code> or add to your <code>composer.json<\/code>.<\/p>\n<pre><code class=\"language-bash\">$ composer require google\/cloud-debugger<\/code><\/pre>\n<\/li>\n<li>\n<p>Run the batch daemon script in the background.<\/p>\n<p>On Unix-based systems that have\n<a href=\"http:\/\/php.net\/manual\/en\/book.sem.php\">semaphore extensions<\/a> installed, run the\n<a href=\"https:\/\/github.com\/GoogleCloudPlatform\/google-cloud-php\/blob\/master\/src\/Core\/Batch\/BatchDaemon.php\">BatchDaemon<\/a>:<\/p>\n<pre><code class=\"language-bash\">$ vendor\/bin\/google-cloud-batch daemon<\/code><\/pre>\n<p>On Windows or systems that do not have\n<a href=\"http:\/\/php.net\/manual\/en\/book.sem.php\">semaphore extensions<\/a> installed, run the Debugger\n<a href=\"http:\/\/googlecloudplatform.github.io\/google-cloud-php\/#\/docs\/cloud-debugger\/master\/debugger\/daemon\">Daemon<\/a>:<\/p>\n<pre><code class=\"language-bash\">$ vendor\/bin\/google-cloud-debugger -s &lt;SOURCE_ROOT&gt;<\/code><\/pre>\n<p>The <code>SOURCE_ROOT<\/code> is the base location of your deployed application.<\/p>\n<p>Alternatively, you can provide a configuration script:<\/p>\n<pre><code class=\"language-bash\">$ vendor\/bin\/google-cloud-debugger -c &lt;CONFIG_FILE&gt;<\/code><\/pre>\n<\/li>\n<li>\n<p>Include and start the debugger <code>Agent<\/code> as the first action in your\napplication:<\/p>\n<pre><code class=\"language-php\">$agent = new Google\\Cloud\\Debugger\\Agent();<\/code><\/pre>\n<p>If this file is not in your source root, you will need to provide the path to\nyour application's source root as an optional parameter:<\/p>\n<pre><code class=\"language-php\">$agent = new Google\\Cloud\\Debugger\\Agent([\n    'sourceRoot' =&gt; '\/path\/to\/source\/root'\n]);<\/code><\/pre>\n<\/li>\n<\/ol>\n<h2>Configuration<\/h2>\n<h3>Snapshots<\/h3>\n<p>Debugger snapshots allow you to capture and inspect the call stack and local\nvariables in your application without stopping or slowing it down. In general,\nyou will set breakpoints via the Stackdriver Debugger UI in the\n<a href=\"https:\/\/console.cloud.google.com\/debug\">Cloud Platform Console<\/a>.<\/p>\n<p>See <a href=\"https:\/\/cloud.google.com\/debugger\/docs\/debugging\">Using Debug Snapshots<\/a> for more information on\nsnapshots.<\/p>\n<h3>Logpoints<\/h3>\n<p>Debugger logpoints allow you to inject logging into running services without\nrestarting or interfering with the normal function of the service. This can be\nuseful for debugging production issues without having to add log statements and\nredeploy.<\/p>\n<p>By default, we will send all log messages to Stackdriver Logging, but you can\ncustomize this by providing any PSR-3 compatible logger. For example, to use\n<code>monolog<\/code>:<\/p>\n<pre><code class=\"language-php\">$agent = new Google\\Cloud\\Debugger\\Agent([\n    'logger' =&gt; new Monolog\\Logger('name')\n]);<\/code><\/pre>\n<p>See <a href=\"https:\/\/cloud.google.com\/debugger\/docs\/logpoints\">Using Debug Logpoints<\/a> for more information on\nlogpoints.<\/p>\n<\/body>","methods":[]}