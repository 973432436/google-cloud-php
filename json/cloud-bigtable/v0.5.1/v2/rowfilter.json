{"id":"bigtable\/v2\/rowfilter","type":"","title":"Google\\Cloud\\Bigtable\\V2\\RowFilter","name":"RowFilter","description":"<p>Takes a row as input and produces an alternate view of the row based on\nspecified rules. For example, a RowFilter might trim down a row to include\njust the cells from columns matching a given regular expression, or might\nreturn all the cells of a row but not their values. More complicated filters\ncan be composed out of these components to express requests such as, &quot;within\nevery column of a particular family, give just the two most recent cells\nwhich are older than timestamp X.&quot;\nThere are two broad categories of RowFilters (true filters and transformers),\nas well as two ways to compose simple filters into more complex ones\n(chains and interleaves). They work as follows:<\/p>\n<ul>\n<li>\n<p>True filters alter the input row by excluding some of its cells wholesale\nfrom the output row. An example of a true filter is the <code>value_regex_filter<\/code>,\nwhich excludes cells whose values don't match the specified pattern. All\nregex true filters use RE2 syntax (<a href=\"https:\/\/github.com\/google\/re2\/wiki\/Syntax\">https:\/\/github.com\/google\/re2\/wiki\/Syntax<\/a>)\nin raw byte mode (RE2::Latin1), and are evaluated as full matches. An\nimportant point to keep in mind is that <code>RE2(.)<\/code> is equivalent by default to\n<code>RE2([^\\n])<\/code>, meaning that it does not match newlines. When attempting to\nmatch an arbitrary byte, you should therefore use the escape sequence <code>\\C<\/code>,\nwhich may need to be further escaped as <code>\\\\C<\/code> in your client language.<\/p>\n<\/li>\n<li>\n<p>Transformers alter the input row by changing the values of some of its\ncells in the output, without excluding them completely. Currently, the only\nsupported transformer is the <code>strip_value_transformer<\/code>, which replaces every\ncell's value with the empty string.<\/p>\n<\/li>\n<li>\n<p>Chains and interleaves are described in more detail in the\nRowFilter.Chain and RowFilter.Interleave documentation.\nThe total serialized size of a RowFilter message must not\nexceed 4096 bytes, and RowFilters may not be nested within each other\n(in Chains or Interleaves) to a depth of more than 20.<\/p>\n<\/li>\n<\/ul>\n<p>Generated from protobuf message <code>google.bigtable.v2.RowFilter<\/code><\/p>\n<p>Extends \\Google\\Protobuf\\Internal\\Message<\/p>","examples":[],"resources":[],"methods":[{"id":"getChain","type":"instance","name":"getChain","source":"Bigtable\/src\/V2\/RowFilter.php#L59","description":"<p>Applies several RowFilters to the data in sequence, progressively\nnarrowing the results.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.RowFilter.Chain chain = 1;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter_chain\">Google\\Cloud\\Bigtable\\V2\\RowFilter_Chain<\/a>"],"description":""}]},{"id":"setChain","type":"instance","name":"setChain","source":"Bigtable\/src\/V2\/RowFilter.php#L72","description":"<p>Applies several RowFilters to the data in sequence, progressively\nnarrowing the results.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.RowFilter.Chain chain = 1;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Applies several RowFilters to the data in sequence, progressively\nnarrowing the results.<\/p>\n","types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter_chain\">Google\\Cloud\\Bigtable\\V2\\RowFilter_Chain<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getInterleave","type":"instance","name":"getInterleave","source":"Bigtable\/src\/V2\/RowFilter.php#L87","description":"<p>Applies several RowFilters to the data in parallel and combines the\nresults.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.RowFilter.Interleave interleave = 2;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter_interleave\">Google\\Cloud\\Bigtable\\V2\\RowFilter_Interleave<\/a>"],"description":""}]},{"id":"setInterleave","type":"instance","name":"setInterleave","source":"Bigtable\/src\/V2\/RowFilter.php#L100","description":"<p>Applies several RowFilters to the data in parallel and combines the\nresults.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.RowFilter.Interleave interleave = 2;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Applies several RowFilters to the data in parallel and combines the\nresults.<\/p>\n","types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter_interleave\">Google\\Cloud\\Bigtable\\V2\\RowFilter_Interleave<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getCondition","type":"instance","name":"getCondition","source":"Bigtable\/src\/V2\/RowFilter.php#L115","description":"<p>Applies one of two possible RowFilters to the data based on the output of\na predicate RowFilter.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.RowFilter.Condition condition = 3;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter_condition\">Google\\Cloud\\Bigtable\\V2\\RowFilter_Condition<\/a>"],"description":""}]},{"id":"setCondition","type":"instance","name":"setCondition","source":"Bigtable\/src\/V2\/RowFilter.php#L128","description":"<p>Applies one of two possible RowFilters to the data based on the output of\na predicate RowFilter.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.RowFilter.Condition condition = 3;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Applies one of two possible RowFilters to the data based on the output of\na predicate RowFilter.<\/p>\n","types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter_condition\">Google\\Cloud\\Bigtable\\V2\\RowFilter_Condition<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getSink","type":"instance","name":"getSink","source":"Bigtable\/src\/V2\/RowFilter.php#L195","description":"<p>ADVANCED USE ONLY.<\/p>\n<table>\n<thead>\n<tr>\n<th>Hook for introspection into the RowFilter. Outputs all cells directly to\nthe output of the read rather than to any parent filter. Consider the\nfollowing example:\nChain(\nFamilyRegex(&quot;A&quot;),\nInterleave(\nAll(),\nChain(Label(&quot;foo&quot;), Sink())\n),\nQualifierRegex(&quot;B&quot;)\n)\nA,A,1,w\nA,B,2,x\nB,B,4,z<\/th>\n<th>FamilyRegex(&quot;A&quot;)<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<\/tbody>\n<\/table>\n<pre><code>                    A,A,1,w\n                    A,B,2,x\n                       |\n          +------------+-------------+\n          |                          |\n        All()                    Label(foo)\n          |                          |\n       A,A,1,w              A,A,1,w,labels:[foo]\n       A,B,2,x              A,B,2,x,labels:[foo]\n          |                          |\n          |                        Sink() --------------+\n          |                          |                  |\n          +------------+      x------+          A,A,1,w,labels:[foo]\n                       |                        A,B,2,x,labels:[foo]\n                    A,A,1,w                             |\n                    A,B,2,x                             |\n                       |                                |\n               QualifierRegex(\"B\")                      |\n                       |                                |\n                    A,B,2,x                             |\n                       |                                |\n                       +--------------------------------+\n                       |\n                    A,A,1,w,labels:[foo]\n                    A,B,2,x,labels:[foo]  \/\/ could be switched\n                    A,B,2,x               \/\/ could be switched<\/code><\/pre>\n<p>Despite being excluded by the qualifier filter, a copy of every cell\nthat reaches the sink is present in the final result.\nAs with an [Interleave][google.bigtable.v2.RowFilter.Interleave],\nduplicate cells are possible, and appear in an unspecified mutual order.\nIn this case we have a duplicate with column &quot;A:B&quot; and timestamp 2,\nbecause one copy passed through the all filter while the other was\npassed through the label and sink. Note that one copy has label &quot;foo&quot;,\nwhile the other does not.\nCannot be used within the <code>predicate_filter<\/code>, <code>true_filter<\/code>, or\n<code>false_filter<\/code> of a [Condition][google.bigtable.v2.RowFilter.Condition].<\/p>\n<p>Generated from protobuf field <code>bool sink = 16;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"description":""}]},{"id":"setSink","type":"instance","name":"setSink","source":"Bigtable\/src\/V2\/RowFilter.php#L260","description":"<p>ADVANCED USE ONLY.<\/p>\n<table>\n<thead>\n<tr>\n<th>Hook for introspection into the RowFilter. Outputs all cells directly to\nthe output of the read rather than to any parent filter. Consider the\nfollowing example:\nChain(\nFamilyRegex(&quot;A&quot;),\nInterleave(\nAll(),\nChain(Label(&quot;foo&quot;), Sink())\n),\nQualifierRegex(&quot;B&quot;)\n)\nA,A,1,w\nA,B,2,x\nB,B,4,z<\/th>\n<th>FamilyRegex(&quot;A&quot;)<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<\/tbody>\n<\/table>\n<pre><code>                    A,A,1,w\n                    A,B,2,x\n                       |\n          +------------+-------------+\n          |                          |\n        All()                    Label(foo)\n          |                          |\n       A,A,1,w              A,A,1,w,labels:[foo]\n       A,B,2,x              A,B,2,x,labels:[foo]\n          |                          |\n          |                        Sink() --------------+\n          |                          |                  |\n          +------------+      x------+          A,A,1,w,labels:[foo]\n                       |                        A,B,2,x,labels:[foo]\n                    A,A,1,w                             |\n                    A,B,2,x                             |\n                       |                                |\n               QualifierRegex(\"B\")                      |\n                       |                                |\n                    A,B,2,x                             |\n                       |                                |\n                       +--------------------------------+\n                       |\n                    A,A,1,w,labels:[foo]\n                    A,B,2,x,labels:[foo]  \/\/ could be switched\n                    A,B,2,x               \/\/ could be switched<\/code><\/pre>\n<p>Despite being excluded by the qualifier filter, a copy of every cell\nthat reaches the sink is present in the final result.\nAs with an [Interleave][google.bigtable.v2.RowFilter.Interleave],\nduplicate cells are possible, and appear in an unspecified mutual order.\nIn this case we have a duplicate with column &quot;A:B&quot; and timestamp 2,\nbecause one copy passed through the all filter while the other was\npassed through the label and sink. Note that one copy has label &quot;foo&quot;,\nwhile the other does not.\nCannot be used within the <code>predicate_filter<\/code>, <code>true_filter<\/code>, or\n<code>false_filter<\/code> of a [Condition][google.bigtable.v2.RowFilter.Condition].<\/p>\n<p>Generated from protobuf field <code>bool sink = 16;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>ADVANCED USE ONLY.<\/p>\n<table>\n<thead>\n<tr>\n<th>Hook for introspection into the RowFilter. Outputs all cells directly to\nthe output of the read rather than to any parent filter. Consider the\nfollowing example:\nChain(\nFamilyRegex(&quot;A&quot;),\nInterleave(\nAll(),\nChain(Label(&quot;foo&quot;), Sink())\n),\nQualifierRegex(&quot;B&quot;)\n)\nA,A,1,w\nA,B,2,x\nB,B,4,z<\/th>\n<th>FamilyRegex(&quot;A&quot;)<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<\/tbody>\n<\/table>\n<pre><code>                    A,A,1,w\n                    A,B,2,x\n                       |\n          +------------+-------------+\n          |                          |\n        All()                    Label(foo)\n          |                          |\n       A,A,1,w              A,A,1,w,labels:[foo]\n       A,B,2,x              A,B,2,x,labels:[foo]\n          |                          |\n          |                        Sink() --------------+\n          |                          |                  |\n          +------------+      x------+          A,A,1,w,labels:[foo]\n                       |                        A,B,2,x,labels:[foo]\n                    A,A,1,w                             |\n                    A,B,2,x                             |\n                       |                                |\n               QualifierRegex(\"B\")                      |\n                       |                                |\n                    A,B,2,x                             |\n                       |                                |\n                       +--------------------------------+\n                       |\n                    A,A,1,w,labels:[foo]\n                    A,B,2,x,labels:[foo]  \/\/ could be switched\n                    A,B,2,x               \/\/ could be switched<\/code><\/pre>\n<p>Despite being excluded by the qualifier filter, a copy of every cell\nthat reaches the sink is present in the final result.\nAs with an [Interleave][google.bigtable.v2.RowFilter.Interleave],\nduplicate cells are possible, and appear in an unspecified mutual order.\nIn this case we have a duplicate with column &quot;A:B&quot; and timestamp 2,\nbecause one copy passed through the all filter while the other was\npassed through the label and sink. Note that one copy has label &quot;foo&quot;,\nwhile the other does not.\nCannot be used within the <code>predicate_filter<\/code>, <code>true_filter<\/code>, or\n<code>false_filter<\/code> of a [Condition][google.bigtable.v2.RowFilter.Condition].<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getPassAllFilter","type":"instance","name":"getPassAllFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L275","description":"<p>Matches all cells, regardless of input. Functionally equivalent to\nleaving <code>filter<\/code> unset, but included for completeness.<\/p>\n<p>Generated from protobuf field <code>bool pass_all_filter = 17;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"description":""}]},{"id":"setPassAllFilter","type":"instance","name":"setPassAllFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L288","description":"<p>Matches all cells, regardless of input. Functionally equivalent to\nleaving <code>filter<\/code> unset, but included for completeness.<\/p>\n<p>Generated from protobuf field <code>bool pass_all_filter = 17;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches all cells, regardless of input. Functionally equivalent to\nleaving <code>filter<\/code> unset, but included for completeness.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getBlockAllFilter","type":"instance","name":"getBlockAllFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L303","description":"<p>Does not match any cells, regardless of input. Useful for temporarily\ndisabling just part of a filter.<\/p>\n<p>Generated from protobuf field <code>bool block_all_filter = 18;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"description":""}]},{"id":"setBlockAllFilter","type":"instance","name":"setBlockAllFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L316","description":"<p>Does not match any cells, regardless of input. Useful for temporarily\ndisabling just part of a filter.<\/p>\n<p>Generated from protobuf field <code>bool block_all_filter = 18;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Does not match any cells, regardless of input. Useful for temporarily\ndisabling just part of a filter.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getRowKeyRegexFilter","type":"instance","name":"getRowKeyRegexFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L336","description":"<p>Matches only cells from rows whose keys satisfy the given RE2 regex. In\nother words, passes through the entire row when the key matches, and\notherwise produces an empty row.<\/p>\n<p>Note that, since row keys can contain arbitrary bytes, the <code>\\C<\/code> escape\nsequence must be used if a true wildcard is desired. The <code>.<\/code> character\nwill not match the new line character <code>\\n<\/code>, which may be present in a\nbinary key.<\/p>\n<p>Generated from protobuf field <code>bytes row_key_regex_filter = 4;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setRowKeyRegexFilter","type":"instance","name":"setRowKeyRegexFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L354","description":"<p>Matches only cells from rows whose keys satisfy the given RE2 regex. In\nother words, passes through the entire row when the key matches, and\notherwise produces an empty row.<\/p>\n<p>Note that, since row keys can contain arbitrary bytes, the <code>\\C<\/code> escape\nsequence must be used if a true wildcard is desired. The <code>.<\/code> character\nwill not match the new line character <code>\\n<\/code>, which may be present in a\nbinary key.<\/p>\n<p>Generated from protobuf field <code>bytes row_key_regex_filter = 4;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches only cells from rows whose keys satisfy the given RE2 regex. In\nother words, passes through the entire row when the key matches, and\notherwise produces an empty row.<\/p>\n<p>Note that, since row keys can contain arbitrary bytes, the <code>\\C<\/code> escape\nsequence must be used if a true wildcard is desired. The <code>.<\/code> character\nwill not match the new line character <code>\\n<\/code>, which may be present in a\nbinary key.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getRowSampleFilter","type":"instance","name":"getRowSampleFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L369","description":"<p>Matches all cells from a row with probability p, and matches no cells\nfrom the row with probability 1-p.<\/p>\n<p>Generated from protobuf field <code>double row_sample_filter = 14;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.float.php\" target=\"_blank\">float<\/a>"],"description":""}]},{"id":"setRowSampleFilter","type":"instance","name":"setRowSampleFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L382","description":"<p>Matches all cells from a row with probability p, and matches no cells\nfrom the row with probability 1-p.<\/p>\n<p>Generated from protobuf field <code>double row_sample_filter = 14;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches all cells from a row with probability p, and matches no cells\nfrom the row with probability 1-p.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.float.php\" target=\"_blank\">float<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getFamilyNameRegexFilter","type":"instance","name":"getFamilyNameRegexFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L401","description":"<p>Matches only cells from columns whose families satisfy the given RE2\nregex. For technical reasons, the regex must not contain the <code>:<\/code>\ncharacter, even if it is not being used as a literal.<\/p>\n<p>Note that, since column families cannot contain the new line character\n<code>\\n<\/code>, it is sufficient to use <code>.<\/code> as a full wildcard when matching\ncolumn family names.<\/p>\n<p>Generated from protobuf field <code>string family_name_regex_filter = 5;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setFamilyNameRegexFilter","type":"instance","name":"setFamilyNameRegexFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L418","description":"<p>Matches only cells from columns whose families satisfy the given RE2\nregex. For technical reasons, the regex must not contain the <code>:<\/code>\ncharacter, even if it is not being used as a literal.<\/p>\n<p>Note that, since column families cannot contain the new line character\n<code>\\n<\/code>, it is sufficient to use <code>.<\/code> as a full wildcard when matching\ncolumn family names.<\/p>\n<p>Generated from protobuf field <code>string family_name_regex_filter = 5;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches only cells from columns whose families satisfy the given RE2\nregex. For technical reasons, the regex must not contain the <code>:<\/code>\ncharacter, even if it is not being used as a literal.<\/p>\n<p>Note that, since column families cannot contain the new line character\n<code>\\n<\/code>, it is sufficient to use <code>.<\/code> as a full wildcard when matching\ncolumn family names.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getColumnQualifierRegexFilter","type":"instance","name":"getColumnQualifierRegexFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L437","description":"<p>Matches only cells from columns whose qualifiers satisfy the given RE2\nregex.<\/p>\n<p>Note that, since column qualifiers can contain arbitrary bytes, the <code>\\C<\/code>\nescape sequence must be used if a true wildcard is desired. The <code>.<\/code>\ncharacter will not match the new line character <code>\\n<\/code>, which may be\npresent in a binary qualifier.<\/p>\n<p>Generated from protobuf field <code>bytes column_qualifier_regex_filter = 6;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setColumnQualifierRegexFilter","type":"instance","name":"setColumnQualifierRegexFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L454","description":"<p>Matches only cells from columns whose qualifiers satisfy the given RE2\nregex.<\/p>\n<p>Note that, since column qualifiers can contain arbitrary bytes, the <code>\\C<\/code>\nescape sequence must be used if a true wildcard is desired. The <code>.<\/code>\ncharacter will not match the new line character <code>\\n<\/code>, which may be\npresent in a binary qualifier.<\/p>\n<p>Generated from protobuf field <code>bytes column_qualifier_regex_filter = 6;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches only cells from columns whose qualifiers satisfy the given RE2\nregex.<\/p>\n<p>Note that, since column qualifiers can contain arbitrary bytes, the <code>\\C<\/code>\nescape sequence must be used if a true wildcard is desired. The <code>.<\/code>\ncharacter will not match the new line character <code>\\n<\/code>, which may be\npresent in a binary qualifier.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getColumnRangeFilter","type":"instance","name":"getColumnRangeFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L468","description":"<p>Matches only cells from columns within the given range.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.ColumnRange column_range_filter = 7;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/columnrange\">Google\\Cloud\\Bigtable\\V2\\ColumnRange<\/a>"],"description":""}]},{"id":"setColumnRangeFilter","type":"instance","name":"setColumnRangeFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L480","description":"<p>Matches only cells from columns within the given range.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.ColumnRange column_range_filter = 7;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches only cells from columns within the given range.<\/p>\n","types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/columnrange\">Google\\Cloud\\Bigtable\\V2\\ColumnRange<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getTimestampRangeFilter","type":"instance","name":"getTimestampRangeFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L494","description":"<p>Matches only cells with timestamps within the given range.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.TimestampRange timestamp_range_filter = 8;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/timestamprange\">Google\\Cloud\\Bigtable\\V2\\TimestampRange<\/a>"],"description":""}]},{"id":"setTimestampRangeFilter","type":"instance","name":"setTimestampRangeFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L506","description":"<p>Matches only cells with timestamps within the given range.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.TimestampRange timestamp_range_filter = 8;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches only cells with timestamps within the given range.<\/p>\n","types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/timestamprange\">Google\\Cloud\\Bigtable\\V2\\TimestampRange<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getValueRegexFilter","type":"instance","name":"getValueRegexFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L524","description":"<p>Matches only cells with values that satisfy the given regular expression.<\/p>\n<p>Note that, since cell values can contain arbitrary bytes, the <code>\\C<\/code> escape\nsequence must be used if a true wildcard is desired. The <code>.<\/code> character\nwill not match the new line character <code>\\n<\/code>, which may be present in a\nbinary value.<\/p>\n<p>Generated from protobuf field <code>bytes value_regex_filter = 9;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setValueRegexFilter","type":"instance","name":"setValueRegexFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L540","description":"<p>Matches only cells with values that satisfy the given regular expression.<\/p>\n<p>Note that, since cell values can contain arbitrary bytes, the <code>\\C<\/code> escape\nsequence must be used if a true wildcard is desired. The <code>.<\/code> character\nwill not match the new line character <code>\\n<\/code>, which may be present in a\nbinary value.<\/p>\n<p>Generated from protobuf field <code>bytes value_regex_filter = 9;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches only cells with values that satisfy the given regular expression.<\/p>\n<p>Note that, since cell values can contain arbitrary bytes, the <code>\\C<\/code> escape\nsequence must be used if a true wildcard is desired. The <code>.<\/code> character\nwill not match the new line character <code>\\n<\/code>, which may be present in a\nbinary value.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getValueRangeFilter","type":"instance","name":"getValueRangeFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L554","description":"<p>Matches only cells with values that fall within the given range.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.ValueRange value_range_filter = 15;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/valuerange\">Google\\Cloud\\Bigtable\\V2\\ValueRange<\/a>"],"description":""}]},{"id":"setValueRangeFilter","type":"instance","name":"setValueRangeFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L566","description":"<p>Matches only cells with values that fall within the given range.<\/p>\n<p>Generated from protobuf field <code>.google.bigtable.v2.ValueRange value_range_filter = 15;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches only cells with values that fall within the given range.<\/p>\n","types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/valuerange\">Google\\Cloud\\Bigtable\\V2\\ValueRange<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getCellsPerRowOffsetFilter","type":"instance","name":"getCellsPerRowOffsetFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L582","description":"<p>Skips the first N cells of each row, matching all subsequent cells.<\/p>\n<p>If duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.<\/p>\n<p>Generated from protobuf field <code>int32 cells_per_row_offset_filter = 10;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"description":""}]},{"id":"setCellsPerRowOffsetFilter","type":"instance","name":"setCellsPerRowOffsetFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L596","description":"<p>Skips the first N cells of each row, matching all subsequent cells.<\/p>\n<p>If duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.<\/p>\n<p>Generated from protobuf field <code>int32 cells_per_row_offset_filter = 10;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Skips the first N cells of each row, matching all subsequent cells.<\/p>\n<p>If duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getCellsPerRowLimitFilter","type":"instance","name":"getCellsPerRowLimitFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L612","description":"<p>Matches only the first N cells of each row.<\/p>\n<p>If duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.<\/p>\n<p>Generated from protobuf field <code>int32 cells_per_row_limit_filter = 11;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"description":""}]},{"id":"setCellsPerRowLimitFilter","type":"instance","name":"setCellsPerRowLimitFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L626","description":"<p>Matches only the first N cells of each row.<\/p>\n<p>If duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.<\/p>\n<p>Generated from protobuf field <code>int32 cells_per_row_limit_filter = 11;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches only the first N cells of each row.<\/p>\n<p>If duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getCellsPerColumnLimitFilter","type":"instance","name":"getCellsPerColumnLimitFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L645","description":"<p>Matches only the most recent N cells within each column. For example,\nif N=2, this filter would match column <code>foo:bar<\/code> at timestamps 10 and 9,\nskip all earlier cells in <code>foo:bar<\/code>, and then begin matching again in\ncolumn <code>foo:bar2<\/code>.<\/p>\n<p>If duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.<\/p>\n<p>Generated from protobuf field <code>int32 cells_per_column_limit_filter = 12;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"description":""}]},{"id":"setCellsPerColumnLimitFilter","type":"instance","name":"setCellsPerColumnLimitFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L662","description":"<p>Matches only the most recent N cells within each column. For example,\nif N=2, this filter would match column <code>foo:bar<\/code> at timestamps 10 and 9,\nskip all earlier cells in <code>foo:bar<\/code>, and then begin matching again in\ncolumn <code>foo:bar2<\/code>.<\/p>\n<p>If duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.<\/p>\n<p>Generated from protobuf field <code>int32 cells_per_column_limit_filter = 12;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Matches only the most recent N cells within each column. For example,\nif N=2, this filter would match column <code>foo:bar<\/code> at timestamps 10 and 9,\nskip all earlier cells in <code>foo:bar<\/code>, and then begin matching again in\ncolumn <code>foo:bar2<\/code>.<\/p>\n<p>If duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getStripValueTransformer","type":"instance","name":"getStripValueTransformer","source":"Bigtable\/src\/V2\/RowFilter.php#L676","description":"<p>Replaces each cell's value with the empty string.<\/p>\n<p>Generated from protobuf field <code>bool strip_value_transformer = 13;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"description":""}]},{"id":"setStripValueTransformer","type":"instance","name":"setStripValueTransformer","source":"Bigtable\/src\/V2\/RowFilter.php#L688","description":"<p>Replaces each cell's value with the empty string.<\/p>\n<p>Generated from protobuf field <code>bool strip_value_transformer = 13;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Replaces each cell's value with the empty string.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getApplyLabelTransformer","type":"instance","name":"getApplyLabelTransformer","source":"Bigtable\/src\/V2\/RowFilter.php#L712","description":"<p>Applies the given label to all cells in the output row. This allows\nthe client to determine which results were produced from which part of\nthe filter.<\/p>\n<p>Values must be at most 15 characters in length, and match the RE2\npattern <code>[a-z0-9\\\\-]+<\/code>\nDue to a technical limitation, it is not currently possible to apply\nmultiple labels to a cell. As a result, a Chain may have no more than\none sub-filter which contains a <code>apply_label_transformer<\/code>. It is okay for\nan Interleave to contain multiple <code>apply_label_transformers<\/code>, as they\nwill be applied to separate copies of the input. This may be relaxed in\nthe future.<\/p>\n<p>Generated from protobuf field <code>string apply_label_transformer = 19;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setApplyLabelTransformer","type":"instance","name":"setApplyLabelTransformer","source":"Bigtable\/src\/V2\/RowFilter.php#L734","description":"<p>Applies the given label to all cells in the output row. This allows\nthe client to determine which results were produced from which part of\nthe filter.<\/p>\n<p>Values must be at most 15 characters in length, and match the RE2\npattern <code>[a-z0-9\\\\-]+<\/code>\nDue to a technical limitation, it is not currently possible to apply\nmultiple labels to a cell. As a result, a Chain may have no more than\none sub-filter which contains a <code>apply_label_transformer<\/code>. It is okay for\nan Interleave to contain multiple <code>apply_label_transformers<\/code>, as they\nwill be applied to separate copies of the input. This may be relaxed in\nthe future.<\/p>\n<p>Generated from protobuf field <code>string apply_label_transformer = 19;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Applies the given label to all cells in the output row. This allows\nthe client to determine which results were produced from which part of\nthe filter.<\/p>\n<p>Values must be at most 15 characters in length, and match the RE2\npattern <code>[a-z0-9\\\\-]+<\/code>\nDue to a technical limitation, it is not currently possible to apply\nmultiple labels to a cell. As a result, a Chain may have no more than\none sub-filter which contains a <code>apply_label_transformer<\/code>. It is okay for\nan Interleave to contain multiple <code>apply_label_transformers<\/code>, as they\nwill be applied to separate copies of the input. This may be relaxed in\nthe future.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-bigtable\/v0.5.1\/bigtable\/v2\/rowfilter\">Google\\Cloud\\Bigtable\\V2\\RowFilter<\/a>"],"description":""}]},{"id":"getFilter","type":"instance","name":"getFilter","source":"Bigtable\/src\/V2\/RowFilter.php#L745","description":"","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]}]}